{"version":3,"file":"background.js","sources":["../src/background/background.ts"],"sourcesContent":["// Initialize storage and rules\nchrome.runtime.onInstalled.addListener(async () => {\n  // Initialize chrome.storage\n  await chrome.storage.sync.set({ \n    blockedCount: 0, \n    transformedCount: 0,\n    blockingHistory: Array(7).fill(0)\n  });\n  await chrome.storage.local.set({ blockedAds: [] });\n\n  // Set extension action options\n  await chrome.declarativeNetRequest.setExtensionActionOptions({\n    displayActionCountAsBadgeText: true\n  });\n});\n\n// Single listener for blocked requests\nchrome.declarativeNetRequest.onRuleMatchedDebug?.addListener(\n  ({ request, rule }) => {\n    // Ignore main frame blocks to avoid counting page loads\n    if (request.type === 'main_frame') return;\n\n    console.debug(`[AdFriend] Blocked ad request to: ${request.url}`);\n    console.debug(`[AdFriend] Matched rule: ${rule.ruleId}`);\n\n    // Use chrome.storage for storing counts\n    chrome.storage.sync.get(['blockedCount', 'transformedCount', 'blockingHistory'], (result) => {\n      const currentCount = result.blockedCount || 0;\n      const newBlockedCount = currentCount + 1;\n      \n      // Update blocking history\n      const history = result.blockingHistory || Array(7).fill(0);\n      history[6] = newBlockedCount; // Update today's count\n      \n      chrome.storage.sync.set({ \n        blockedCount: newBlockedCount,\n        blockingHistory: history\n      }, () => {\n        if (chrome.runtime.lastError) {\n          console.error('[AdFriend] Error updating blocked count:', chrome.runtime.lastError);\n          return;\n        }\n        // Notify popup to update display only after storage is updated\n        try {\n          chrome.runtime.sendMessage({\n            type: 'updateCounts',\n            blockedCount: newBlockedCount,\n            transformedCount: result.transformedCount || 0\n          });\n        } catch (messageError) {\n          console.debug('[AdFriend] Popup not ready for message');\n        }\n\n        // Store analytics data\n        const analyticsData = {\n          url: request.url,\n          ruleId: rule.ruleId,\n          timestamp: new Date().toISOString(),\n          type: 'blocked',\n          details: {\n            initiator: request.initiator || 'unknown',\n            frameId: request.frameId,\n            resourceType: request.type || 'unknown',\n            isAdResource: true\n          }\n        };\n\n        // Use callback-based storage for analytics\n        chrome.storage.local.get('blockedAds', (data) => {\n          const blockedAds = data.blockedAds || [];\n          blockedAds.push(analyticsData);\n          \n          // Keep only the last 1000 entries\n          if (blockedAds.length > 1000) {\n            blockedAds.shift();\n          }\n\n          chrome.storage.local.set({ blockedAds });\n        });\n      });\n    });\n  }\n);"],"names":["_a","request","rule","result","newBlockedCount","history","analyticsData","data","blockedAds"],"mappings":"AACA,OAAO,QAAQ,YAAY,YAAY,SAAY,CAE3C,MAAA,OAAO,QAAQ,KAAK,IAAI,CAC5B,aAAc,EACd,iBAAkB,EAClB,gBAAiB,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA,CACjC,EACK,MAAA,OAAO,QAAQ,MAAM,IAAI,CAAE,WAAY,GAAI,EAG3C,MAAA,OAAO,sBAAsB,0BAA0B,CAC3D,8BAA+B,EAAA,CAChC,CACH,CAAC,EAbD,IAAAA,GAgBAA,EAAA,OAAO,sBAAsB,qBAA7B,MAAAA,EAAiD,YAC/C,CAAC,CAAE,QAAAC,EAAS,KAAAC,KAAW,CAEjBD,EAAQ,OAAS,eAErB,QAAQ,MAAM,qCAAqCA,EAAQ,GAAG,EAAE,EAChE,QAAQ,MAAM,4BAA4BC,EAAK,MAAM,EAAE,EAGhD,OAAA,QAAQ,KAAK,IAAI,CAAC,eAAgB,mBAAoB,iBAAiB,EAAIC,GAAW,CAE3F,MAAMC,GADeD,EAAO,cAAgB,GACL,EAGjCE,EAAUF,EAAO,iBAAmB,MAAM,CAAC,EAAE,KAAK,CAAC,EACzDE,EAAQ,CAAC,EAAID,EAEN,OAAA,QAAQ,KAAK,IAAI,CACtB,aAAcA,EACd,gBAAiBC,CAAA,EAChB,IAAM,CACH,GAAA,OAAO,QAAQ,UAAW,CAC5B,QAAQ,MAAM,2CAA4C,OAAO,QAAQ,SAAS,EAClF,MACF,CAEI,GAAA,CACF,OAAO,QAAQ,YAAY,CACzB,KAAM,eACN,aAAcD,EACd,iBAAkBD,EAAO,kBAAoB,CAAA,CAC9C,OACoB,CACrB,QAAQ,MAAM,wCAAwC,CACxD,CAGA,MAAMG,EAAgB,CACpB,IAAKL,EAAQ,IACb,OAAQC,EAAK,OACb,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,KAAM,UACN,QAAS,CACP,UAAWD,EAAQ,WAAa,UAChC,QAASA,EAAQ,QACjB,aAAcA,EAAQ,MAAQ,UAC9B,aAAc,EAChB,CAAA,EAIF,OAAO,QAAQ,MAAM,IAAI,aAAeM,GAAS,CACzC,MAAAC,EAAaD,EAAK,YAAc,GACtCC,EAAW,KAAKF,CAAa,EAGzBE,EAAW,OAAS,KACtBA,EAAW,MAAM,EAGnB,OAAO,QAAQ,MAAM,IAAI,CAAE,WAAAA,CAAY,CAAA,CAAA,CACxC,CAAA,CACF,CAAA,CACF,EACH"}