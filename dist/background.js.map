{"version":3,"file":"background.js","sources":["../src/utils/adPatterns.ts","../src/background/background.ts"],"sourcesContent":["// Common ad network domains and patterns\nexport const adPatterns = [\n  // Major Ad Networks\n  \"*://*.doubleclick.net/*\",\n  \"*://*.googlesyndication.com/*\",\n  \"*://*.google-analytics.com/*\",\n  \"*://*.adnxs.com/*\",\n  \"*://*.amazon-adsystem.com/*\",\n  \"*://*.facebook.com/tr/*\",\n  \"*://*.moatads.com/*\",\n  \"*://*.outbrain.com/*\",\n  \"*://*.taboola.com/*\",\n  \"*://*.criteo.com/*\",\n  \"*://*.adform.net/*\",\n  \"*://*.rubiconproject.com/*\",\n\n  // Ad Serving and Delivery\n  \"*://ads.*/*\",\n  \"*://ad.*/*\",\n  \"*://adserv.*/*\",\n  \"*://adserver.*/*\",\n  \"*://banner.*/*\",\n  \"*://banners.*/*\",\n  \"*://creatives.*/*\",\n  \"*://delivery.*/*\",\n\n  // Analytics and Tracking\n  \"*://analytics.*/*\",\n  \"*://pixel.*/*\",\n  \"*://track.*/*\",\n  \"*://tracker.*/*\",\n  \"*://beacon.*/*\",\n  \"*://stats.*/*\",\n  \"*://*/*/tracking/*\",\n  \"*://*/*/analytics/*\",\n  \"*://*/*/pixel/*\",\n  \"*://*/*/beacon/*\",\n\n  // Common Ad URL Patterns\n  \"*://*/*-ad-*\",\n  \"*://*/*_ad_*\",\n  \"*://*/*-ads-*\",\n  \"*://*/*_ads_*\",\n  \"*://*/*/ads/*\",\n  \"*://*/*/ad/*\",\n  \"*://*/*/advert/*\",\n  \"*://*/*/sponsor/*\",\n  \"*://*/*/banner/*\",\n  \"*://*/*/promo/*\",\n\n  // Social Media and Third-party Ads\n  \"*://*.2mdn.net/*\",\n  \"*://*.admob.com/*\",\n  \"*://*.adsafeprotected.com/*\",\n  \"*://*.adsrvr.org/*\",\n  \"*://*.pubmatic.com/*\",\n  \"*://*.serving-sys.com/*\",\n  \"*://*.sharethrough.com/*\",\n  \"*://*.teads.tv/*\",\n  \"*://*.yieldmo.com/*\"\n];\n","import { adPatterns } from '../utils/adPatterns';\nimport type { Message, ContentType } from '../types';\nimport type { RuleActionType, ResourceType } from '../types';\n\ntype DynamicRule = chrome.declarativeNetRequest.Rule;\n\nconst contentTypes: ContentType[] = ['quote', 'fact', 'reminder'];\n\n// Initialize and manage dynamic rules\nasync function initializeRules() {\n  try {\n    // Get existing rules to remove them\n    const existingRules = await chrome.declarativeNetRequest.getDynamicRules();\n    const existingRuleIds = existingRules.map(rule => rule.id);\n\n    // Create new rules from patterns\n    const newRules: DynamicRule[] = adPatterns.map((pattern, index) => ({\n      id: 1000 + index,\n      priority: 1,\n      action: { type: 'block' as RuleActionType },\n      condition: {\n        urlFilter: pattern,\n        resourceTypes: ['script', 'image', 'xmlhttprequest', 'sub_frame', 'main_frame'] as ResourceType[]\n      }\n    }));\n\n    // Update rules\n    await chrome.declarativeNetRequest.updateDynamicRules({\n      removeRuleIds: existingRuleIds,\n      addRules: newRules\n    });\n\n    console.debug(`[AdFriend] Successfully initialized ${newRules.length} blocking rules`);\n  } catch (error) {\n    console.error('[AdFriend] Error initializing rules:', error);\n  }\n}\n\n// Initialize rules when extension loads\ninitializeRules();\n\n// Listen for content script initialization and blocked requests\nchrome.runtime.onMessage.addListener((message: Message, _sender, sendResponse) => {\n  try {\n    if (message.type === 'CONTENT_SCRIPT_READY') {\n      // Select a random content type for the replacement\n      const randomType = contentTypes[Math.floor(Math.random() * contentTypes.length)];\n      sendResponse({ \n        type: 'BACKGROUND_READY',\n        payload: {\n          contentType: randomType\n        }\n      });\n\n      // Initialize analytics storage\n      chrome.storage.local.get('blockedAds', (data) => {\n        if (!data.blockedAds) {\n          chrome.storage.local.set({ blockedAds: [] });\n        }\n      });\n    }\n    return true; // Keep the message channel open for async response\n  } catch (error) {\n    console.error('[AdFriend] Error processing message:', error);\n    sendResponse({ type: 'ERROR', payload: { error: 'Internal error occurred' } });\n    return false;\n  }\n});\n\n// Initialize counters in storage\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.sync.get(['blockedCount', 'transformedCount'], (result) => {\n    if (typeof result.blockedCount === 'undefined') {\n      chrome.storage.sync.set({ blockedCount: 0 });\n    }\n    if (typeof result.transformedCount === 'undefined') {\n      chrome.storage.sync.set({ transformedCount: 0 });\n    }\n  });\n});\n\n// Monitor blocked requests for analytics using recommended API\nchrome.declarativeNetRequest.onRuleMatchedDebug?.addListener(\n  ({ request, rule }) => {\n    try {\n      console.debug(`[AdFriend] Blocked ad request to: ${request.url}`);\n      console.debug(`[AdFriend] Matched rule: ${rule.ruleId}`);\n\n      // Increment blocked count\n      chrome.storage.sync.get(['blockedCount'], (result) => {\n        const newCount = (result.blockedCount || 0) + 1;\n        chrome.storage.sync.set({ blockedCount: newCount }, () => {\n          // Notify popup to update display\n          chrome.runtime.sendMessage({\n            type: 'updateCounts',\n            blockedCount: newCount\n          });\n        });\n      });\n\n      // Store analytics data\n      chrome.storage.local.set({\n        [`blocked_${Date.now()}`]: {\n          url: request.url,\n          ruleId: rule.ruleId,\n          timestamp: new Date().toISOString()\n        }\n      }).catch(console.error);\n    } catch (error) {\n      console.error('[AdFriend] Error processing blocked request:', error);\n    }\n  }\n);\n\n// Listen for ad space transformations\nchrome.runtime.onMessage.addListener((message: Message) => {\n  if (message.type === 'AD_TRANSFORMED') {\n    chrome.storage.sync.get(['transformedCount'], (result) => {\n      const newCount = (result.transformedCount || 0) + 1;\n      chrome.storage.sync.set({ transformedCount: newCount }, () => {\n        // Notify popup to update display\n        chrome.runtime.sendMessage({\n          type: 'updateCounts',\n          transformedCount: newCount\n        });\n      });\n    });\n  }\n  return true; // Keep the message channel open for async operations\n});"],"names":["adPatterns","contentTypes","initializeRules","existingRuleIds","rule","newRules","pattern","index","error","message","_sender","sendResponse","randomType","data","result","_a","request","newCount"],"mappings":"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"}