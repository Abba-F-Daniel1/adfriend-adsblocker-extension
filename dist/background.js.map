{"version":3,"file":"background.js","sources":["../src/background/background.ts"],"sourcesContent":["interface BlockStats {\n  totalBlocked: number;\n  byDomain: {\n    [domain: string]: number;\n  };\n  byType: {\n    [type: string]: number;\n  };\n  timestamp: number;\n}\n\n// Initialize extension with proper rule setup\nchrome.runtime.onInstalled.addListener(async () => {\n  console.log(\"[AdFriend] Extension installed/updated\");\n\n  // Initialize storage with default values\n  await chrome.storage.sync.set({\n    blockedCount: 0,\n    enabled: true,\n    blockStats: {\n      totalBlocked: 0,\n      byDomain: {},\n      byType: {},\n      timestamp: Date.now(),\n    },\n  });\n\n  try {\n    // First, get and remove all existing rules\n    const existingRules = await chrome.declarativeNetRequest.getDynamicRules();\n    const existingRuleIds = existingRules.map((rule) => rule.id);\n\n    // Update rules: remove old ones and add new ones\n    await chrome.declarativeNetRequest.updateDynamicRules({\n      removeRuleIds: existingRuleIds,\n      addRules: [\n        {\n          id: 100, // Using higher IDs to avoid conflicts\n          priority: 1,\n          action: { type: chrome.declarativeNetRequest.RuleActionType.BLOCK },\n          condition: {\n            urlFilter: \"*doubleclick.net/*\",\n            resourceTypes: [\n              chrome.declarativeNetRequest.ResourceType.SCRIPT,\n              chrome.declarativeNetRequest.ResourceType.IMAGE,\n              chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,\n              chrome.declarativeNetRequest.ResourceType.SUB_FRAME,\n            ],\n          },\n        },\n        {\n          id: 101,\n          priority: 1,\n          action: { type: chrome.declarativeNetRequest.RuleActionType.BLOCK },\n          condition: {\n            urlFilter: \"*googlesyndication.com/*\",\n            resourceTypes: [\n              chrome.declarativeNetRequest.ResourceType.SCRIPT,\n              chrome.declarativeNetRequest.ResourceType.IMAGE,\n              chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,\n              chrome.declarativeNetRequest.ResourceType.SUB_FRAME,\n            ],\n          },\n        },\n        {\n          id: 102,\n          priority: 1,\n          action: { type: chrome.declarativeNetRequest.RuleActionType.BLOCK },\n          condition: {\n            urlFilter: \"*google-analytics.com/*\",\n            resourceTypes: [\n              chrome.declarativeNetRequest.ResourceType.SCRIPT,\n              chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,\n            ],\n          },\n        },\n        {\n          id: 103,\n          priority: 1,\n          action: { type: chrome.declarativeNetRequest.RuleActionType.BLOCK },\n          condition: {\n            urlFilter: \"*ads.*/*\",\n            resourceTypes: [\n              chrome.declarativeNetRequest.ResourceType.SCRIPT,\n              chrome.declarativeNetRequest.ResourceType.SUB_FRAME,\n              chrome.declarativeNetRequest.ResourceType.IMAGE,\n            ],\n          },\n        },\n      ],\n    });\n\n    console.log(\"[AdFriend] Rules initialized successfully\");\n  } catch (error) {\n    console.error(\"[AdFriend] Error initializing rules:\", error);\n  }\n});\n\n// Function to update rules based on enabled state\nasync function updateRules(enabled: boolean) {\n  try {\n    if (enabled) {\n      // Enable blocking rules\n      await chrome.declarativeNetRequest.updateEnabledRulesets({\n        enableRulesetIds: [\"ruleset_1\"],\n      });\n      console.log(\"[AdFriend] Blocking rules enabled\");\n    } else {\n      // Disable blocking rules\n      await chrome.declarativeNetRequest.updateEnabledRulesets({\n        disableRulesetIds: [\"ruleset_1\"],\n      });\n      // Notify all tabs to remove inspirational content\n      const tabs = await chrome.tabs.query({});\n      tabs.forEach((tab) => {\n        if (tab.id) {\n          chrome.tabs.sendMessage(tab.id, { type: \"DISABLE_ADFRIEND\" });\n        }\n      });\n      console.log(\"[AdFriend] Blocking rules disabled\");\n    }\n  } catch (error) {\n    console.error(\"[AdFriend] Error updating rules:\", error);\n  }\n}\n\n// Listen for storage changes to handle enable/disable\nchrome.storage.onChanged.addListener((changes, namespace) => {\n  if (namespace === \"sync\" && changes.enabled) {\n    const isEnabled = changes.enabled.newValue;\n    console.log(\"[AdFriend] Extension \" + (isEnabled ? \"enabled\" : \"disabled\"));\n\n    if (!isEnabled) {\n      chrome.action.setBadgeText({ text: \"OFF\" });\n      chrome.action.setBadgeBackgroundColor({ color: \"#6b7280\" });\n    } else {\n      chrome.storage.sync.get([\"blockedCount\"], (result) => {\n        const count = result.blockedCount || 0;\n        chrome.action.setBadgeText({ text: count.toString() });\n        chrome.action.setBadgeBackgroundColor({ color: \"#22c55e\" });\n      });\n    }\n  }\n});\n\n// Function to extract domain from URL\nfunction extractDomain(url: string): string {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname;\n  } catch {\n    return url;\n  }\n}\n\n// Function to update badge with animation\nfunction updateBadgeWithAnimation(count: number) {\n  const colors = [\"#22c55e\", \"#16a34a\", \"#15803d\"];\n  let colorIndex = 0;\n\n  const animate = () => {\n    if (colorIndex < colors.length) {\n      chrome.action.setBadgeBackgroundColor({ color: colors[colorIndex] });\n      chrome.action.setBadgeText({ text: count.toString() });\n      colorIndex++;\n      setTimeout(animate, 100);\n    }\n  };\n\n  animate();\n}\n\n// Listen for rule matches only when enabled\nchrome.declarativeNetRequest.onRuleMatchedDebug?.addListener(\n  async ({ request }) => {\n    const { enabled } = await chrome.storage.sync.get(\"enabled\");\n    if (!enabled) return;\n\n    // Don't count main frame requests\n    if (request.type === \"main_frame\") return;\n\n    // Increment counter when an ad request is blocked\n    chrome.storage.sync.get([\"blockedCount\"], (result) => {\n      const newBlockedCount = (result.blockedCount || 0) + 1;\n      chrome.storage.sync.set({ blockedCount: newBlockedCount });\n      chrome.action.setBadgeText({ text: newBlockedCount.toString() });\n    });\n  }\n);\n\n// Reset daily stats at midnight\nsetInterval(async () => {\n  const { blockStats } = await chrome.storage.sync.get(\"blockStats\");\n  const now = Date.now();\n  const lastReset = new Date(blockStats.timestamp);\n  const today = new Date();\n\n  if (lastReset.getDate() !== today.getDate()) {\n    console.log(\"[AdFriend] Resetting daily stats\");\n    await chrome.storage.sync.set({\n      blockStats: {\n        totalBlocked: blockStats.totalBlocked, // Keep total\n        byDomain: {}, // Reset daily domains\n        byType: {}, // Reset daily types\n        timestamp: now,\n      },\n    });\n  }\n}, 60000); // Check every minute\n\n// Listen for startup\nchrome.runtime.onStartup.addListener(async () => {\n  const { enabled } = await chrome.storage.sync.get(\"enabled\");\n  updateRules(enabled);\n\n  if (enabled) {\n    const { blockedCount = 0 } = await chrome.storage.sync.get(\"blockedCount\");\n    chrome.action.setBadgeText({ text: blockedCount.toString() });\n  }\n});\n"],"names":["existingRuleIds","rule","error","updateRules","enabled","tab","changes","namespace","isEnabled","result","count","_a","request","newBlockedCount","blockStats","now","lastReset","today","blockedCount"],"mappings":"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"}