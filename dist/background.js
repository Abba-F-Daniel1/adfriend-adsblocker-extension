chrome.runtime.onInstalled.addListener(async()=>{console.log("[AdFriend] Extension installed/updated"),await chrome.storage.sync.set({blockedCount:0,enabled:!0,blockStats:{totalBlocked:0,byDomain:{},byType:{},timestamp:Date.now()}});try{const t=(await chrome.declarativeNetRequest.getDynamicRules()).map(o=>o.id);await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:t,addRules:[{id:100,priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:"*doubleclick.net/*",resourceTypes:[chrome.declarativeNetRequest.ResourceType.SCRIPT,chrome.declarativeNetRequest.ResourceType.IMAGE,chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,chrome.declarativeNetRequest.ResourceType.SUB_FRAME]}},{id:101,priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:"*googlesyndication.com/*",resourceTypes:[chrome.declarativeNetRequest.ResourceType.SCRIPT,chrome.declarativeNetRequest.ResourceType.IMAGE,chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,chrome.declarativeNetRequest.ResourceType.SUB_FRAME]}},{id:102,priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:"*google-analytics.com/*",resourceTypes:[chrome.declarativeNetRequest.ResourceType.SCRIPT,chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]}},{id:103,priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:"*ads.*/*",resourceTypes:[chrome.declarativeNetRequest.ResourceType.SCRIPT,chrome.declarativeNetRequest.ResourceType.SUB_FRAME,chrome.declarativeNetRequest.ResourceType.IMAGE]}}]}),console.log("[AdFriend] Rules initialized successfully")}catch(e){console.error("[AdFriend] Error initializing rules:",e)}});async function s(e){try{e?(await chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:["ruleset_1"]}),console.log("[AdFriend] Blocking rules enabled")):(await chrome.declarativeNetRequest.updateEnabledRulesets({disableRulesetIds:["ruleset_1"]}),(await chrome.tabs.query({})).forEach(o=>{o.id&&chrome.tabs.sendMessage(o.id,{type:"DISABLE_ADFRIEND"})}),console.log("[AdFriend] Blocking rules disabled"))}catch(t){console.error("[AdFriend] Error updating rules:",t)}}chrome.storage.onChanged.addListener((e,t)=>{if(t==="sync"&&e.enabled){const o=e.enabled.newValue;console.log("[AdFriend] Extension "+(o?"enabled":"disabled")),o?chrome.storage.sync.get(["blockedCount"],c=>{const r=c.blockedCount||0;chrome.action.setBadgeText({text:r.toString()}),chrome.action.setBadgeBackgroundColor({color:"#22c55e"})}):(chrome.action.setBadgeText({text:"OFF"}),chrome.action.setBadgeBackgroundColor({color:"#6b7280"}))}});var a;(a=chrome.declarativeNetRequest.onRuleMatchedDebug)==null||a.addListener(async({request:e})=>{const{enabled:t}=await chrome.storage.sync.get("enabled");t&&e.type!=="main_frame"&&chrome.storage.sync.get(["blockedCount"],o=>{const c=(o.blockedCount||0)+1;chrome.storage.sync.set({blockedCount:c}),chrome.action.setBadgeText({text:c.toString()})})});setInterval(async()=>{const{blockStats:e}=await chrome.storage.sync.get("blockStats"),t=Date.now(),o=new Date(e.timestamp),c=new Date;o.getDate()!==c.getDate()&&(console.log("[AdFriend] Resetting daily stats"),await chrome.storage.sync.set({blockStats:{totalBlocked:e.totalBlocked,byDomain:{},byType:{},timestamp:t}}))},6e4);chrome.runtime.onStartup.addListener(async()=>{const{enabled:e}=await chrome.storage.sync.get("enabled");if(s(e),e){const{blockedCount:t=0}=await chrome.storage.sync.get("blockedCount");chrome.action.setBadgeText({text:t.toString()})}});
//# sourceMappingURL=background.js.map
