chrome.runtime.onInstalled.addListener(async()=>{console.log("[AdFriend] Extension installed/updated"),await chrome.storage.sync.set({blockedCount:0,enabled:!0}),console.log("[AdFriend] Storage initialized"),await chrome.declarativeNetRequest.setExtensionActionOptions({displayActionCountAsBadgeText:!0})});async function s(e){try{e?(await chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:["ruleset_1"]}),console.log("[AdFriend] Blocking rules enabled")):(await chrome.declarativeNetRequest.updateEnabledRulesets({disableRulesetIds:["ruleset_1"]}),(await chrome.tabs.query({})).forEach(o=>{o.id&&chrome.tabs.sendMessage(o.id,{type:"DISABLE_ADFRIEND"})}),console.log("[AdFriend] Blocking rules disabled"))}catch(t){console.error("[AdFriend] Error updating rules:",t)}}chrome.storage.onChanged.addListener((e,t)=>{if(t==="sync"&&e.enabled){const o=e.enabled.newValue;s(o),o?chrome.storage.sync.get(["blockedCount"],n=>{const r=n.blockedCount||0;chrome.action.setBadgeText({text:r.toString()})}):chrome.action.setBadgeText({text:""})}});var a;(a=chrome.declarativeNetRequest.onRuleMatchedDebug)==null||a.addListener(async({request:e})=>{const{enabled:t}=await chrome.storage.sync.get("enabled");t&&e.type!=="main_frame"&&chrome.storage.sync.get(["blockedCount"],o=>{const n=(o.blockedCount||0)+1;chrome.storage.sync.set({blockedCount:n}),chrome.action.setBadgeText({text:n.toString()})})});chrome.runtime.onStartup.addListener(async()=>{const{enabled:e}=await chrome.storage.sync.get("enabled");if(s(e),e){const{blockedCount:t=0}=await chrome.storage.sync.get("blockedCount");chrome.action.setBadgeText({text:t.toString()})}});
//# sourceMappingURL=background.js.map
